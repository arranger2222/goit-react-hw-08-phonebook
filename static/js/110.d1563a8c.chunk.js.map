{"version":3,"file":"static/js/110.d1563a8c.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.js","components/Snack/Snack.js","components/Filter/Filter.styled.jsx","components/Filter/Filter.js","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.js","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.js","pages/ContactsPage.js","redux/selectors.js","utils/Container.jsx","utils/Section.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  float: left;\n  margin-right: 30px;\n`;\n\nexport const Label = styled.label`\n  display: flex;\n  flex-direction: column;\n  margin-bottom: 20px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin: 0 0 15px 0;\n  padding: 10px;\n  width: 250px;\n  border: 1px solid #ccc;\n`;\n\nexport const Button = styled.button`\n  cursor: pointer;\n  padding: 10px 30px;\n  background: #f8a035;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  transition: 250ms;\n  &:hover {\n    background: #dd7f0c;\n  }\n`;\n\nexport const ButtonDisabled = styled.button`\n  padding: 10px 30px;\n  background: #ccc;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n`;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport {\n  FormStyled,\n  Label,\n  Input,\n  Button,\n  ButtonDisabled,\n} from 'components/ContactForm/ContactForm.styled';\nimport { selectContacts } from 'redux/selectors';\nimport { addContact } from 'redux/operations';\nimport { Snack } from 'components/Snack/Snack';\n\nexport const ContactForm = () => {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n\n  const [isSnackOpen, setIsSnackOpen] = useState(false);\n\n  const isContactInList = contactName => {\n    const lowercaseName = contactName.toLowerCase();\n    return contacts.find(({ name }) =>\n      name.toLowerCase().includes(lowercaseName)\n    );\n  };\n\n  const handleFormSubmit = e => {\n    e.preventDefault();\n\n    if (isContactInList(name)) {\n      alert(`${name} is already in contacts.`);\n      return;\n    }\n\n    const contactItem = {\n      name,\n      number,\n    };\n\n    dispatch(addContact(contactItem));\n\n    setIsSnackOpen(true);\n\n    reset();\n  };\n\n  const handleInputChange = e => {\n    const { name, value } = e.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n\n      case 'number':\n        setNumber(value);\n        break;\n\n      default:\n        throw new Error('Not supported type');\n    }\n  };\n\n  function reset() {\n    setName('');\n    setNumber('');\n  }\n\n  return (\n    <>\n      {isSnackOpen && (\n        <Snack\n          isOpen={isSnackOpen}\n          handleClose={() => {\n            setIsSnackOpen(false);\n          }}\n          text=\"Contact created\"\n          type=\"success\"\n        />\n      )}\n      <FormStyled onSubmit={handleFormSubmit}>\n        <Label>\n          <Input\n            type=\"text\"\n            name=\"name\"\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n            required\n            value={name}\n            onChange={handleInputChange}\n            placeholder=\"Name\"\n            autoComplete=\"off\"\n          />\n        </Label>\n        <Label>\n          <Input\n            type=\"tel\"\n            name=\"number\"\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n            required\n            value={number}\n            onChange={handleInputChange}\n            placeholder=\"Number\"\n            autoComplete=\"off\"\n          />\n        </Label>\n        <Button title=\"add contact\" type=\"submit\">\n          Add contact\n        </Button>\n      </FormStyled>\n    </>\n  );\n};\n\nexport const ContactFormDisabled = () => {\n  return (\n    <>\n      <FormStyled>\n        <Label>\n          <Input placeholder=\"Name\" autoComplete=\"off\" disabled />\n        </Label>\n        <Label>\n          <Input placeholder=\"Number\" autoComplete=\"off\" disabled />\n        </Label>\n        <ButtonDisabled title=\"add contact\" disabled>\n          Add contact\n        </ButtonDisabled>\n      </FormStyled>\n    </>\n  );\n};\n","import { Snackbar, Alert } from '@mui/material';\n\nexport const Snack = ({\n  isOpen = true,\n  handleClose,\n  text,\n  position = { vertical: 'bottom', horizontal: 'center' },\n  type,\n}) => {\n  return (\n    <Snackbar\n      open={isOpen}\n      onClose={handleClose}\n      autoHideDuration={3000}\n      anchorOrigin={position}\n    >\n      <Alert onClose={handleClose} severity={type}>\n        {text}\n      </Alert>\n    </Snackbar>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  padding-top: 30px;\n  float: left;\n  margin-right: 30px;\n`;\n\nexport const Input = styled.input`\n  display: block;\n  margin: 10px 0 15px 0;\n  padding: 10px;\n  width: 250px;\n  border: 1px solid #ccc;\n`;\n","import { useSelector, useDispatch } from 'react-redux';\n\nimport { filterValue } from 'redux/filterSlice';\nimport { selectFilterValue } from 'redux/selectors';\nimport { Input, Label } from './Filter.styled';\n\nexport const Filter = () => {\n  const filter = useSelector(selectFilterValue);\n  const dispatch = useDispatch();\n  const handleFilterChange = e => {\n    dispatch(filterValue(e.currentTarget.value));\n  };\n\n  return (\n    <>\n      {' '}\n      <Label>\n        <Input\n          value={filter}\n          onChange={handleFilterChange}\n          name=\"filter\"\n          placeholder=\"Filter\"\n          id=\"filter\"\n          autoComplete=\"off\"\n        />\n      </Label>\n    </>\n  );\n};\n\nexport default Filter;\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  cursor: pointer;\n  font-size: 12px;\n  align-self: center;\n  padding: 0 30px;\n  background: #f8a035;\n  color: #fff;\n  border: none;\n  border-radius: 4px;\n  height: auto;\n  height: 30px;\n  transition: 250ms;\n\n  &:hover {\n    background: #dd7f0c;\n  }\n`;\n","import PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\n\nimport { deleteContact } from 'redux/operations';\n\nimport DeleteForeverRoundedIcon from '@mui/icons-material/DeleteForeverRounded';\nimport { Button } from './ContactItem.styled';\n\nexport function ContactItem({ id, name, number }) {\n  const dispatch = useDispatch();\n\n  const onDeleteContact = () => {\n    dispatch(deleteContact(id));\n  };\n\n  return (\n    <>\n      <p>{name}</p>\n      <p>{number}</p>\n\n      <Button\n        size=\"small\"\n        variant=\"contained\"\n        type=\"button\"\n        onClick={onDeleteContact}\n        startIcon={<DeleteForeverRoundedIcon />}\n      >\n        Delete\n      </Button>\n    </>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const List = styled.ul`\n  overflow: hidden;\n  width: 50vw;\n  border-left: 1px solid #ccc;\n  padding-bottom: 30px;\n  list-style: none;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid #ccc;\n  padding: 20px;\n`;\n","import { useSelector } from 'react-redux';\nimport { ThreeCircles } from 'react-loader-spinner';\nimport {\n  selectFiltredContacts,\n  selectIsLoading,\n  selectError,\n} from 'redux/selectors';\n\nimport { ContactItem } from 'components/ContactItem/ContactItem';\nimport { Snack } from 'components/Snack/Snack';\n\nimport { Item, List } from './ContactList.styled';\n\nexport function ContactList() {\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n  const filtredContacts = useSelector(selectFiltredContacts);\n\n  return (\n    <>\n      {isLoading && !error && (\n        <ThreeCircles\n          height=\"100\"\n          width=\"100\"\n          color=\"#f8a035\"\n          wrapperStyle={{}}\n          wrapperClass=\"\"\n          visible={true}\n          ariaLabel=\"three-circles-rotating\"\n          outerCircleColor=\"\"\n          innerCircleColor=\"\"\n          middleCircleColor=\"\"\n        />\n      )}\n      {error && <p>{error}</p>}\n      {filtredContacts.length > 0 && !error ? (\n        <List>\n          {filtredContacts.map(({ id, name, number }) => (\n            <Item key={id}>\n              <ContactItem id={id} name={name} number={number} />\n            </Item>\n          ))}\n        </List>\n      ) : (\n        !isLoading && <Snack type=\"error\" text=\"Not found any contact :(\" />\n      )}\n    </>\n  );\n}\n","import { useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\n\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { fetchContacts } from 'redux/operations';\nimport { Container } from 'utils/Container';\nimport { Section } from 'utils/Section';\n\nconst ContactsPage = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section>\n        <ContactForm />\n        <Filter />\n      </Section>\n      <Section>\n        <ContactList />\n      </Section>\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items.contacts;\n\nexport const selectIsLoading = state => state.contacts.items.isLoading;\n\nexport const selectError = state => state.contacts.items.error;\n\nexport const selectFilterValue = state => state.contacts.filter;\n\nexport const selectFiltredContacts = createSelector(\n  [selectContacts, selectFilterValue],\n  (contacts, filter) =>\n    contacts.filter(contact =>\n      contact.name.toLowerCase().includes(filter.toLowerCase())\n    )\n);\n","import styled from 'styled-components';\n\nexport const Container = styled.div`\n  min-height: calc(100vh - 160px);\n  display: flex;\n  padding: 20px 30px;\n  background-color: #f3f3f3;\n  color: #333;\n  &:link {\n    text-decoration: none;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Section = styled.section`\n  padding: 30px 15px;\n  display: flex;\n  flex-direction: column;\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n\nexport const SectionContent = styled.section`\n  line-height: 1.8;\n  height: 140px;\n  padding: 10px 40px;\n  display: flex;\n  flex-direction: column;\n  border-left: 1px solid #ccc;\n  &:not(:last-child) {\n    margin-bottom: 15px;\n  }\n`;\n"],"names":["FormStyled","styled","Label","Input","Button","ButtonDisabled","ContactForm","useState","name","setName","number","setNumber","contacts","useSelector","selectContacts","dispatch","useDispatch","isSnackOpen","setIsSnackOpen","handleInputChange","e","currentTarget","value","Error","Snack","isOpen","handleClose","text","type","onSubmit","preventDefault","contactName","lowercaseName","toLowerCase","find","includes","isContactInList","alert","contactItem","addContact","pattern","title","required","onChange","placeholder","autoComplete","ContactFormDisabled","disabled","position","vertical","horizontal","open","onClose","autoHideDuration","anchorOrigin","severity","Filter","filter","selectFilterValue","filterValue","id","ContactItem","size","variant","onClick","deleteContact","startIcon","DeleteForeverRounded","List","Item","ContactList","isLoading","selectIsLoading","error","selectError","filtredContacts","selectFiltredContacts","height","width","color","wrapperStyle","wrapperClass","visible","ariaLabel","outerCircleColor","innerCircleColor","middleCircleColor","length","map","useEffect","fetchContacts","Container","Section","state","items","createSelector","contact","SectionContent"],"sourceRoot":""}